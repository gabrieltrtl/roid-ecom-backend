const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Fun√ß√£o para logar usu√°rio
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const normalizedEmail = email.toLowerCase();
    const user = await User.findOne({ email: normalizedEmail });

    if (!user) {
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    const isPasswordValid = await user.comparePassword(password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Senha inv√°lida.' });
    }

    if (!user.isActive) {
      return res.status(403).json({ message: "Conta bloqueada. Pagamento pendente." });
    }

    const token = jwt.sign(
      {
        userId: user._id,
        companyId: user.companyId,
        role: user.role,
      },
      process.env.JWT_SECRET,
      { expiresIn: "8h" }
    );
    
    res.status(200).json({ token });
  } catch (error) {
    console.error('Erro ao fazer login:', error);
    res.status(500).json({ message: 'Erro ao fazer login', error });
  }
};

// Fun√ß√£o para criar um usu√°rio
const createUser = async (req, res) => {
  try {
    const { name, email, password, role, companyId: bodyCompanyId } = req.body;

    if (!role) {
      return res.status(400).json({ message: "O campo role √© obrigat√≥rio." });
    }

    let companyId = req.companyId; // padr√£o: companyId do token

    // üö® Se o novo usu√°rio for superadmin, n√£o precisa de companyId
    if (role === 'superadmin') {
      companyId = undefined;
    }
    
    // üö® Se quem est√° criando √© superadmin e criando um usu√°rio normal (n√£o superadmin),
    // companyId deve vir no body obrigatoriamente
    if (req.role === 'superadmin' && role !== 'superadmin') {
      if (!bodyCompanyId) {
        return res.status(400).json({ message: "Superadmin criando usu√°rio comum precisa informar companyId." });
      }
      companyId = bodyCompanyId;
    }

    // Se n√£o tem companyId e n√£o √© superadmin, erro
    if (!companyId && role !== 'superadmin') {
      return res.status(400).json({ message: "Empresa n√£o identificada. companyId obrigat√≥rio para este tipo de usu√°rio." });
    }

    // üîê Valida√ß√£o da senha
    const stringPassword = String(password).trim();
    if (!stringPassword || stringPassword.length < 6) {
      return res.status(400).json({ message: "Senha inv√°lida. Deve ter pelo menos 6 caracteres." });
    }

    // Verifica se o e-mail j√° existe (considerando companyId se n√£o for superadmin)
    const existingQuery = { email };
    if (role !== 'superadmin') {
      existingQuery.companyId = companyId;
    }

    const existingUser = await User.findOne(existingQuery);
    if (existingUser) {
      return res.status(400).json({ message: "Usu√°rio j√° cadastrado." });
    }

    const newUser = new User({
      name,
      email,
      password: stringPassword,
      role,
      companyId: companyId || undefined, // companyId s√≥ se tiver
    });

    await newUser.save();
    res.status(201).json(newUser);

  } catch (error) {
    console.error("‚ùå Erro ao criar usu√°rio:", error);

    if (error.code === 11000) {
      return res.status(400).json({ message: "E-mail j√° cadastrado para esta empresa." });
    }

    res.status(500).json({
      message: 'Erro ao criar usu√°rio',
      error: error.message,
      stack: error.stack,
    });
  }
};


// Fun√ß√£o para listar todos os usu√°rios
const getAllUsers = async (req, res) => {
  try {
    if (!req.companyId) {
      return res.status(400).json({ message: "Empresa n√£o identificada."} );
    }

    const users = await User.find({ companyId: req.companyId })

    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao listar usu√°rios', error });
  }
};

// Fun√ß√£o para buscar um usu√°rio pelo ID
const getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!req.companyId) {
      return res.status(400).json({ message: "Empresa n√£o identificada." });
    }

    const user = await User.findOne({ _id: id, companyId: req.companyId });

    if (!user) {
      return res.status(400).json({ message: "Usu√°rio n√£o encontrado." });
    }


    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao buscar usu√°rio', error });
  }
};

// Fun√ß√£o para atualizar um usu√°rio
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, password, role } = req.body;
    

    if (!req.companyId) {
      return res.status(400).json({ message: "Empresa n√£o identificada." });
    }

    const updatedUser = await User.findOneAndUpdate(
      { _id: id, companyId: req.companyId },
      { name, email, password, role },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado nesta empresa.' });
    }

    res.status(200).json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao atualizar usu√°rio', error });
  }
};

// Fun√ß√£o para deletar um usu√°rio
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!req.companyId) {
      return res.status(400).json({ message: "Empresa n√£o identificada." });
    }
    
    const deletedUser = await User.findOneAndDelete({ _id: id, companyId: req.companyId });

    if (!deletedUser) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    res.status(200).json({ message: 'Usu√°rio deletado com sucesso' });
  } catch (error) {
    res.status(500).json({ message: 'Erro ao deletar usu√°rio', error });
  }
};

module.exports = {
  loginUser,
  createUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser
};
