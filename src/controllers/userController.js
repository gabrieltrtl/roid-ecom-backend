const User = require('../models/User');
const jwt = require('jsonwebtoken');

// Fun칞칚o para logar usu치rio
const loginUser = async (req, res) => {
  const { email, password } = req.body;
  const company = req.company;

  try {

    if (!company) {
      return res.status(400).json({ message: "Empresa n칚o identificada." });
    }

     // Verifica se o usu치rio existe nessa empresa
     const user = await User.findOne({ email, companyId: company._id });
    // Verifica se o usu치rio existe
    if (!user) {
      return res.status(404).json({ message: "Usu치rio n칚o encontrado para esta empresa." });
    }

    // Compara a senha fornecida com a senha armazenada no banco
    const isPasswordValid = await user.comparePassword(password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Senha inv치lida' });
    }

    // Cria o token JWT
    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "8h" });

    res.status(200).json({ token });
  } catch (error) {
    console.error('Erro ao fazer login:', error);
    res.status(500).json({ message: 'Erro ao fazer login', error });
  }
};

// Fun칞칚o para criar um usu치rio
const createUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    const company = req.company;

    if (!company) {
      return res.status(400).json({ message: "Empresa n칚o identificada no subdom칤nio." });
    }

    // Verifica se o usu치rio j치 existe nessa empresa
    const existingUser = await User.findOne({ email, companyId: req.company._id });

    if (existingUser) {
      return res.status(400).json({ message: "Usu치rio j치 cadastrado para esta empresa." });
    }

    const newUser = new User({
      name,
      email,
      password,
      role,
      companyId: req.company._id,
    });

    await newUser.save();
    res.status(201).json(newUser);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao criar usu치rio', error });
  }
};

// Fun칞칚o para listar todos os usu치rios
const getAllUsers = async (req, res) => {
  try {
    const company = req.company;

    if (!company) {
      return res.status(400).json({ message: "Empresa n칚o identificada." });
    }

     // 游댳 Retorna apenas os usu치rios da empresa logada
    const users = await User.find({ companyId: company._id });

    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao listar usu치rios', error });
  }
};

// Fun칞칚o para buscar um usu치rio pelo ID
const getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const company = req.company;

    const user = await User.findOne({ _id: id, companyId: company._id });
    if (!user) {
      return res.status(404).json({ message: 'Usu치rio n칚o encontrado' });
    }

    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao buscar usu치rio', error });
  }
};

// Fun칞칚o para atualizar um usu치rio
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, password, role } = req.body;
    const company = req.company;

    const updatedUser = await User.findOneAndUpdate(
      { _id: id, companyId: company._id },
      { name, email, password, role },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: 'Usu치rio n칚o encontrado nesta empresa.' });
    }

    res.status(200).json(updatedUser);
  } catch (error) {
    res.status(500).json({ message: 'Erro ao atualizar usu치rio', error });
  }
};

// Fun칞칚o para deletar um usu치rio
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const company = req.company;
    
    const deletedUser = await User.findOneAndDelete({ _id: id, companyId: company._id });

    if (!deletedUser) {
      return res.status(404).json({ message: 'Usu치rio n칚o encontrado' });
    }

    res.status(200).json({ message: 'Usu치rio deletado com sucesso' });
  } catch (error) {
    res.status(500).json({ message: 'Erro ao deletar usu치rio', error });
  }
};

module.exports = {
  loginUser,
  createUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser
};
